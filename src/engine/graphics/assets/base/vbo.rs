extern crate gl;
use std::mem;
use gl::types::*;

pub struct VBO {
    id: GLuint,        // Stores the VBO ID generated by OpenGL
    vertex_data: Vec<f32>, // Store the vertex data for cloning
}

impl VBO {
    /// Creates a new Vertex Buffer Object and uploads the provided vertex data.
    pub fn new(data: &[f32]) -> Self {
        let mut vbo: GLuint = 0;

        unsafe {
            // Generate a new buffer
            gl::GenBuffers(1, &mut vbo);

            // Bind the buffer (GL_ARRAY_BUFFER means it is a vertex buffer)
            gl::BindBuffer(gl::ARRAY_BUFFER, vbo);

            // Upload the vertex data to the buffer
            gl::BufferData(
                gl::ARRAY_BUFFER,                            // Target buffer type
                (data.len() * mem::size_of::<GLfloat>()) as GLsizeiptr, // Size of the data
                data.as_ptr() as *const GLvoid,              // Pointer to data
                gl::STATIC_DRAW,                             // Usage hint
            );

            // Unbind the buffer to avoid accidental modification
            gl::BindBuffer(gl::ARRAY_BUFFER, 0);
        }

        Self {
            id: vbo,
            vertex_data: data.to_vec(), // Store the vertex data
        }
    }

    // Clone implementation for VBO
    pub fn clone(&self) -> Self {
        // Create a new VBO using the stored vertex data
        let mut new_vbo = VBO::new(&self.vertex_data);
        new_vbo.id = self.id; // You may want to create a new ID here to ensure itâ€™s separate

        new_vbo
    }

    /// Binds the VBO for use (this makes the buffer active).
    pub fn bind(&self) {
        unsafe {
            gl::BindBuffer(gl::ARRAY_BUFFER, self.id);
        }
    }

    /// Unbinds any active VBO.
    pub fn unbind() {
        unsafe {
            gl::BindBuffer(gl::ARRAY_BUFFER, 0);
        }
    }
}

impl Drop for VBO {
    /// Clean up the buffer when it's no longer needed (automatically called by Rust).
    fn drop(&mut self) {
        unsafe {
            gl::DeleteBuffers(1, &self.id);
        }
    }
}
