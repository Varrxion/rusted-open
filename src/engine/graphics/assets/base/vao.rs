use gl::types::GLuint;

pub struct VAO {
    id: GLuint, // Stores the VAO ID generated by OpenGL
}

impl VAO {
    /// Creates a new Vertex Array Object.
    pub fn new() -> Self {
        let mut vao: GLuint = 0;

        unsafe {
            gl::GenVertexArrays(1, &mut vao);
        }

        Self { id: vao }
    }

    /// Binds the VAO for use (this makes the array active).
    pub fn bind(&self) {
        unsafe {
            gl::BindVertexArray(self.id);
        }
    }

    /// Unbinds any active VAO.
    pub fn unbind() {
        unsafe {
            gl::BindVertexArray(0);
        }
    }
}

impl Drop for VAO {
    /// Clean up the VAO when it's no longer needed (automatically called by Rust).
    fn drop(&mut self) {
        unsafe {
            gl::DeleteVertexArrays(1, &self.id);
        }
    }
}
